import cv2
import os
import numpy as np
from keras.models import load_model
from pygame import mixer
import time

# Initialize the mixer for sound alerts
mixer.init()
# Uncomment the line below to enable sound alerts
# sound = mixer.Sound('alarm.wav')

# Load Haar Cascade classifiers for face and eye detection
face_cascade = cv2.CascadeClassifier('haar cascade files/haarcascade_frontalface_alt.xml')
left_eye_cascade = cv2.CascadeClassifier('haar cascade files/haarcascade_lefteye_2splits.xml')
right_eye_cascade = cv2.CascadeClassifier('haar cascade files/haarcascade_righteye_2splits.xml')

# Load the pre-trained model
model = load_model('models/cnncat2.h5')

# Initialize variables
path = os.getcwd()
cap = cv2.VideoCapture(0)
font = cv2.FONT_HERSHEY_COMPLEX_SMALL
score = 0
thicc = 2
rpred = [99]
lpred = [99]

while True:
    ret, frame = cap.read()
    height, width = frame.shape[:2]
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces and eyes
    faces = face_cascade.detectMultiScale(gray, minNeighbors=5, scaleFactor=1.1, minSize=(25, 25))
    left_eyes = left_eye_cascade.detectMultiScale(gray)
    right_eyes = right_eye_cascade.detectMultiScale(gray)

    # Draw a black rectangle for score display
    cv2.rectangle(frame, (0, height-50), (200, height), (0, 0, 0), thickness=cv2.FILLED)

    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (100, 100, 100), 1)

    # Check right eye
    for (x, y, w, h) in right_eyes:
        r_eye = frame[y:y + h, x:x + w]
        r_eye = cv2.cvtColor(r_eye, cv2.COLOR_BGR2GRAY)
        r_eye = cv2.resize(r_eye, (24, 24)) / 255
        r_eye = np.expand_dims(r_eye.reshape(24, 24, -1), axis=0)

        rpred = model.predict_classes(r_eye)
        lbl = 'Open' if rpred[0] == 1 else 'Closed'

    # Check left eye
    for (x, y, w, h) in left_eyes:
        l_eye = frame[y:y + h, x:x + w]
        l_eye = cv2.cvtColor(l_eye, cv2.COLOR_BGR2GRAY)
        l_eye = cv2.resize(l_eye, (24, 24)) / 255
        l_eye = np.expand_dims(l_eye.reshape(24, 24, -1), axis=0)

        lpred = model.predict_classes(l_eye)
        lbl = 'Open' if lpred[0] == 1 else 'Closed'

    # Update score based on eye states
    if rpred[0] == 0 and lpred[0] == 0:
        score += 1
        cv2.putText(frame, "Closed", (10, height - 20), font, 1, (255, 255, 255), 1, cv2.LINE_AA)
    else:
        score -= 1
        cv2.putText(frame, "Open", (10, height - 20), font, 1, (255, 255, 255), 1, cv2.LINE_AA)

    score = max(score, 0)
    cv2.putText(frame, 'Score: ' + str(score), (100, height - 20), font, 1, (255, 255, 255), 1, cv2.LINE_AA)

    # Trigger alert if score exceeds threshold
    if score > 15:
        # Uncomment the line below to play an alarm sound
        # sound.play()
        cv2.imwrite(os.path.join(path, 'image.jpg'), frame)  # Save the frame as an image

    # Draw a rectangle around the frame for alert visualization
    if thicc < 16:
        thicc += 2
    else:
        thicc -= 2
    thicc = max(thicc, 2)

    cv2.rectangle(frame, (0, 0), (width, height), (0, 0, 255), thicc)
    cv2.imshow('Drowsiness Detection', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
